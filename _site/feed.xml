<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-27T16:30:07+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">OSer Huang</title><subtitle>Programmer From Somewhere On Earth</subtitle><entry><title type="html">如何在Ubuntu16.04上通过Nginx和Gunicorn部署Django（译)</title><link href="http://localhost:4000/HowToSetDjango/" rel="alternate" type="text/html" title="如何在Ubuntu16.04上通过Nginx和Gunicorn部署Django（译)" /><published>2018-03-04T00:00:00+01:00</published><updated>2018-03-04T00:00:00+01:00</updated><id>http://localhost:4000/HowToSetDjango</id><content type="html" xml:base="http://localhost:4000/HowToSetDjango/">&lt;!-- # 如何在Ubuntu16.04上通过Nginx和Gunicorn部署Django（译） --&gt;

&lt;p&gt;原文地址：&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2018-03-04-HowToSetDjango/How_To_Set_Up_Django_with_Postgres_Nginx_and_Gunicorn_on_Ubuntu_16.04.png&quot; alt=&quot;HowToSetUpDjango&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;p&gt;Django是一个强大的web框架，它可以帮助你构建Python应用或网站。Django包含了一个简单的server，你可以用它在本地测试代码。但是在现实的生产环境中， 我们需要一个更安全更强大的web server。
在这份教程中，我们将演示如何在Ubuntu 16.04中安装和配置一些组件来支持和服务Django应用。我们先创建一个PostgreSQL数据库来替代默认的SQLite数据库。然后我们会配置Gunicorn与我们的应用进行交互。最后我们创建Nginx作为Gunicorn的反向代理（reverse proxy），我们将使用其安全和性能特性来为我们的应用服务。&lt;/p&gt;

&lt;h2 id=&quot;前提与目标&quot;&gt;前提与目标&lt;/h2&gt;

&lt;p&gt;要完成这个教程，你需要一个全新的Ubuntu 16.04实例，并配置一个有&lt;code&gt;sudo&lt;/code&gt;权限的非root用户。你可以通过我们的&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04&quot;&gt;&lt;strong&gt;服务器初始化教程&lt;/strong&gt;&lt;/a&gt;来学习如何操作。
我们会在虚拟环境中安装Django。将Django安装到你的项目工程环境中可以使你分开操作你的项目和其所需的工程环境。
当我们创建并运行了数据库和我们的应用后，我们会安装配置Gunicorn应用服务器。 它将充当我们应用的一个接口，将客户端的HTTP请求转换为我们应用可以处理的Python调用。然后我们会为Gunicorn配置Nginx，我们会用到其高性能连接处理机制和一些能简单部署的安全特性。&lt;/p&gt;

&lt;h2 id=&quot;从ubuntu代码库安装程序包&quot;&gt;从Ubuntu代码库安装程序包&lt;/h2&gt;

&lt;p&gt;首先，我们要从Ubuntu代码库下载并安装所有需要的项目，之后我们会使用Python包管理器&lt;code&gt;pip&lt;/code&gt;来安装额外的组件。
我们需要先更新本地的&lt;code&gt;apt&lt;/code&gt;包目录，然后下载安装软件包。根据你使用的Python版本的不同，你所需要安装的包也不同。
如果你在使用&lt;strong&gt;Python 2&lt;/strong&gt;，输入：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-pip python-dev libpq-dev postgresql postgresql-contrib nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你在使用&lt;strong&gt;Python 3&lt;/strong&gt;，输入：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就安装了&lt;code&gt;pip&lt;/code&gt;，之后构建Gunicorn所需的一些Python开发文件，Postgres数据库及一些它所需要的库，和Nginx网页服务器。&lt;/p&gt;

&lt;h2 id=&quot;创建postgresql数据库和用户&quot;&gt;创建PostgreSQL数据库和用户&lt;/h2&gt;

&lt;p&gt;现在，我们要为Django应用创建一个数据库和数据库用户。
默认配置下，Postgre对本地连接使用“同行认证（peer authentication）”的认证机制。简单来说就是如果一个操作系统的用户名和一个合法的Postgres用户名相同，那么这个用户就可以直接登录不需要其他授权。
在安装Postgres时，会自动创建一个名为&lt;code&gt;postgres&lt;/code&gt;操作系统用户用以匹配PostgreSQL的管理员用户&lt;code&gt;postgres&lt;/code&gt;。我们需要用这个用户来进行一些管理员操作。我们可以使用&lt;code&gt;sudo&lt;/code&gt;并用&lt;code&gt;-u&lt;/code&gt;选项传递用户名。
输入以下命令进入Postgres交互会话:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; postgres psql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将会看到PostgreSQL的提示符，在这个提示符下可以根据我们的要求进行设置。&lt;br /&gt;
首先，我们为我们的项目创建一个数据库：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;：每条Postgres语句必须以分号结尾，当你遇到问题时请检查你的命令是否有分号。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后为我们的项目创建一个数据库用户。请确保你选择了一个安全的密码：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myprojectuser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来我们更改这个新创建用户的一些连接参数。这是为了加快数据库操作的速度，我们就不需要在每次建立连接时都查询并设置值。&lt;br /&gt;
我们将默认编码方式设置为UTF-8，这也是Django的默认编码方式。同时，我们将默认的事务隔离机制（transaction isolation scheme）设为“read committed”，这将禁止未提交事务的读取操作。最后，我们修改时区。默认设置下，我们的Django项目会设为&lt;code&gt;UTC&lt;/code&gt;。这都是Django的&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/databases/#optimizing-postgresql-s-configuration&quot;&gt;&lt;strong&gt;推荐设置&lt;/strong&gt;&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myprojectuser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_encoding&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myprojectuser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_transaction_isolation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'read committed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myprojectuser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，为新用户授予数据库的管理权限：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myprojectuser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但你完成了所有操作后，你可以输入以下命令退出PostgreSQL提示符：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;posegres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;为项目创建python虚拟环境&quot;&gt;为项目创建Python虚拟环境&lt;/h2&gt;

&lt;p&gt;现在我们创建了数据库，我们继续完善项目的其他需求。为了能更简单的管理，接下来我们将创建Python虚拟环境。
首先，我们使用&lt;code&gt;pip&lt;/code&gt;安装&lt;code&gt;virtualenv&lt;/code&gt;。
如果你在使用&lt;strong&gt;Python 2&lt;/strong&gt;，输入以下命令更新&lt;code&gt;pip&lt;/code&gt;和安装软件包：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你在使用&lt;strong&gt;Python 3&lt;/strong&gt;，输入以下命令更新&lt;code&gt;pip&lt;/code&gt;和安装软件包：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装&lt;code&gt;virtualenv&lt;/code&gt;之后，我们就可以开始创建我们的工程项目。为我们的工程文件创建一个目录，然后进入该目录：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/myproject
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在工程目录下创建Python虚拟环境：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; virtualenv myprojectenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这将在&lt;code&gt;myproject&lt;/code&gt;目录下创建一个名为&lt;code&gt;myprojectenv&lt;/code&gt;的文件夹。在该文件夹下会安装本地的Python和&lt;code&gt;pip&lt;/code&gt;。我们可以使用它们为我们的项目安装和配置一个Python环境。
在安装其他Python库之前，我们先要激活虚拟环境：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;myprojectenv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在命令行提示符会改变以显示你正在一个Python虚拟环境中操作。它应该看起来像这样：&lt;code&gt;(myprojectenv)user@host:~/myproject$&lt;/code&gt;。
激活了虚拟环境后，我们就可以用本地的&lt;code&gt;pip&lt;/code&gt;安装Django，Gunicorn和PostgreSQL适配器&lt;code&gt;psycopg2&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;：当在使用虚拟环境时，无论使用的是哪一版本的Python，只需用使用&lt;code&gt;pip&lt;/code&gt;命令（不是&lt;code&gt;pip3&lt;/code&gt;）。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;django gunicorn psycopg2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在你已经安装了所有Django项目所需的软件。&lt;/p&gt;

&lt;h2 id=&quot;创建和配置一个新的django工程&quot;&gt;创建和配置一个新的Django工程&lt;/h2&gt;

&lt;p&gt;安装完Python组件后，我们现在可以创建Django项目文件。&lt;/p&gt;

&lt;h3 id=&quot;创建django工程&quot;&gt;创建Django工程&lt;/h3&gt;

&lt;p&gt;我们之前已经创建了一个工程目录，我们让Django将文件安装在该目录下。它将创建一个次级目录，里面包含实际的代码和管理的脚本。我们这样做的目的是为了显式地指定目录，而不是让Django来决定：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; django-admin.py startproject myproject ~/myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，你的工程目录（在我们的示例中即~/myproject）下应该有以下内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;~/myproject/manage.py：Django的管理脚本。&lt;/li&gt;
  &lt;li&gt;~/myproject/myproject/：Django工程包，其中应该包含__init__.py，settings.py，urls.py和wsgi.py。&lt;/li&gt;
  &lt;li&gt;~/myproject/myprojectenv/：我们之前创建的虚拟环境目录。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;配置工程设置&quot;&gt;配置工程设置&lt;/h3&gt;

&lt;p&gt;首先，你需要对新建的项目进行设置。在文件编辑器中打开设置文件：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; nano ~/myproject/myproject/settings.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOWED_HOSTS&lt;/code&gt;指令。该指令定义了一个列表，列表中包含可能连接Django实例的服务器地址及域名。任何&lt;strong&gt;Host&lt;/strong&gt;头不在列表中的请求都会触发异常。Django要求你这样设置以屏蔽一些安全漏洞。
在方括号中列出与你Django服务器相关联的IP地址和域名。每一项都需要用引号包围并用逗号进行区分。如果你希望一个域名和其所有子域名都能连接，你可以在域名前添加一个点号（如“.example.com”）。在下面的文件片段中，我们用一些例子进行演示：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 最简单的例子：只添加Django服务器的域名及IP地址
# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']
# 在域名前添加点号就可以响应“example.com”及其子域名
# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'your_server_domain_or_IP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'second_domain_or_IP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后找到数据库接入的设置，它会以&lt;code class=&quot;highlighter-rouge&quot;&gt;DATABASE&lt;/code&gt;为首。默认的设置是用于SQLite数据库的，我们已经建立了一个PostgreSQL数据库，所以我们需要稍加修改。
用你的PostgreSQL数据库信息修改设置。我们告诉Django使用&lt;code class=&quot;highlighter-rouge&quot;&gt;psycopg2&lt;/code&gt;适配库。我们还需要告诉它数据库的名字，数据库的用户名及其密码，并且我们要说明这个数据库是存储于本地的。你可以将&lt;code class=&quot;highlighter-rouge&quot;&gt;Port&lt;/code&gt;设为空字符串：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'myproject'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'myprojectuser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们移动到文件底部，添加静态文件的存储地址。Nginx需要这个地址来处理静态文件的请求。添加的这一行告诉Django将静态文件防止于项目根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;文件夹中：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STATIC_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/static/'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STATIC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'static/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完成后保存并关闭文件。&lt;/p&gt;

&lt;h3 id=&quot;完成工程初始化&quot;&gt;完成工程初始化&lt;/h3&gt;

&lt;p&gt;现在我们使用Django的管理脚本将初始数据库架构迁移到创建的PostgreSQL数据库：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; nano ~/myproject/manage.py makemigrations
&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; nano ~/myproject/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入以下命令为工程创建一个管理用户：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; ~/myproject/manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据提示信息，你需要创建用户名，提供邮件地址，并设置密码。&lt;/p&gt;

&lt;p&gt;将所有静态文件集中到之前配置的静态文件目录：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; ~/myproject/manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个操作需要再次确认。确认后所有的静态文件会被放置在你的工程目录下名为&lt;code&gt;static&lt;/code&gt;的文件夹中。&lt;/p&gt;

&lt;p&gt;如果你参照了初始化服务器的教程，现在就会有UFW防火墙保护你的服务器。为了能方便测试服务器部署，我们允许网页服务端口号的接入：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow 8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，我们就可以运行部署的Django服务器并测试其效果：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; ~/myproject/manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在浏览器中输入服务器的域名或IP地址，在后面加上端口号&lt;code&gt;:8000&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://server_domain_or_IP:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你应该能看到Django默认的索引页：
&lt;img src=&quot;/images/blog/2018-03-04-HowToSetDjango/django_index.png&quot; alt=&quot;django_index&quot; /&gt;&lt;br /&gt;
在网页URL后面添加&lt;code&gt;/admim&lt;/code&gt;，你将会转到管理员登录界面。你可以输入之前&lt;code&gt;/createsuperuser&lt;/code&gt;命令所设置的用户名和密码来登录：
&lt;img src=&quot;/images/blog/2018-03-04-HowToSetDjango/admin_login.png&quot; alt=&quot;admin_login&quot; /&gt;&lt;br /&gt;
登录之后，你就能看到Django默认的管理界面了：
&lt;img src=&quot;/images/blog/2018-03-04-HowToSetDjango/admin_interface.png&quot; alt=&quot;admin_interface&quot; /&gt;&lt;br /&gt;
等你玩够了之后，在终端中输入&lt;strong&gt;CTRL-C&lt;/strong&gt;关闭服务器。&lt;/p&gt;

&lt;h3 id=&quot;测试gunicorn伺服功能&quot;&gt;测试Gunicorn伺服功能&lt;/h3&gt;
&lt;p&gt;在离开虚拟环境之前，我们最后还要测试Gunicorn确保其能服务我们的应用。首先我们进入工程目录下，在用&lt;code&gt;gunicorn&lt;/code&gt;命令加载项目的WSGI模块：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/myproject
&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; gunicorn &lt;span class=&quot;nt&quot;&gt;--bind&lt;/span&gt; 0.0.0.0:8000 myproject.wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就在和之前运行Django服务器一样的接口上开启了Gunicorn，你可以返回上一步再测试一遍。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;strong&gt;注意&lt;/strong&gt;：由于Gunicorn现在并不知道静态CSS文件的响应地址，管理界面不会应用任何样式。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们为Gunicorn指明Django的&lt;code&gt;wsgi.py&lt;/code&gt;文件的相对路径，这个文件是整个应用的入口。在这个文件中定义了&lt;code&gt;application&lt;/code&gt;函数用来和我们的应用进行通信。想要更多地了解WSGI规范，戳&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts&quot;&gt;&lt;strong&gt;这里&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;结束测试后在终端猛戳&lt;strong&gt;CTRL-C&lt;/strong&gt;停止Gunicorn。&lt;/p&gt;

&lt;p&gt;这样就完成了Django应用的配置，现在我们可以退出虚拟环境：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;(myprojectenv) $&lt;/span&gt; deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入后虚拟环境的提示符会被移除。&lt;/p&gt;

&lt;h2 id=&quot;为gunicorn创建systemd文件&quot;&gt;为Gunicorn创建systemd文件&lt;/h2&gt;

&lt;p&gt;我们虽然已经验证了Gunicorn可以和我们的Django应用互动，但我们应该实现一个更健（zhuang）壮（bi）的方式来开启和停止我们的应用服务器。所以我们需要创建一个systemd文件。&lt;/p&gt;

&lt;p&gt;创建systemd文件需要&lt;code&gt;sudo&lt;/code&gt;权限：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/systemd/system/gunicorn.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们先添加&lt;code&gt;[Unit]&lt;/code&gt;部分，这里用于指明元数据（metadata）和依赖（dependencies）。我们放置在这里的说明告诉系统初始化时，只有在获得网络目标后在开始我们的服务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/systemd/system/gunicorn.service

[Unit]
Description=gunicorn daemon
After=network.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来添加&lt;code&gt;[Service]&lt;/code&gt;部分。首先指明运行服务的用户和组。这里我们使用普通用户，因为它拥有所有相关的文件。为了能让Nginx轻松地和Gunicorn通信，我们使用&lt;code&gt;www-data&lt;/code&gt;组。&lt;/p&gt;

&lt;p&gt;接下来我们指明工作目录并添加开启服务的命令。在这个例子中，我们必须要指明安装在虚拟环境下的Gunicorn可执行文件的完整路径。由于Nginx是安装在同一台电脑上，我们将这个路径绑定到一个位于项目目录下的Unix套接字。这样比使用网路端口更加安全也更快一些。我们还可以在这里指明其他的可选的设置，比如在下面的例子里，我们指定3个工作进程：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/systemd/system/gunicorn.service

[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=sammy
Group=www-data
WorkingDirectory=/home/sammy/myproject
ExecStart=/home/sammy/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/sammy/myproject/myproject.sock myproject.wsgi:application
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后添加&lt;code&gt;[Install]&lt;/code&gt;部分。这部分告诉了systemd，如果我们允许服务在boot的时候启动，我们的服务会在标准multi-user系统运行时启动。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/systemd/system/gunicorn.service

[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=sammy
Group=www-data
WorkingDirectory=/home/sammy/myproject
ExecStart=/home/sammy/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/sammy/myproject/myproject.sock myproject.wsgi:application

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到这里我们的systemd文件就完成了，保存并关闭它。&lt;/p&gt;

&lt;p&gt;现在我们可以开启Gunicorn服务并允许其在boot时启动：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start gunicorn
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以通过查看套接字文件判断操作是否成功。&lt;/p&gt;

&lt;h2 id=&quot;检查gunicorn套接字文件&quot;&gt;检查Gunicorn套接字文件&lt;/h2&gt;

&lt;p&gt;键入一下命令查看进程状态：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在你的工作目录下查看是否存在&lt;code&gt;myproject.sock&lt;/code&gt;文件：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /home/sammy/myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;输出
manage.py  myproject  myprojectenv  myproject.sock  static
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果&lt;code&gt;systemctl status&lt;/code&gt;显示有错误或者找不到&lt;code&gt;myproject.sock&lt;/code&gt;文件，那么Gunicorn一定没有正确地运行。那么我们查看Gunicorn进程的日志：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以通过查看日志里的消息找出哪里出了问题。很多原因都会导致运行失败，一般是以下这些原因导致Gunicorn不能创建套接字文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;工程文件被&lt;code&gt;root&lt;/code&gt;用户所用，而不是一个&lt;code&gt;sudo&lt;/code&gt;用户&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/etc/systemd/system/gunicorn.service&lt;/code&gt;中的&lt;code&gt;WorkingDirectory&lt;/code&gt;路径没有指向工程目录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gunicorn&lt;/code&gt;进程的&lt;code&gt;ExecStart&lt;/code&gt;指令配置有误，检查以下几项：
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;gunicorn&lt;/code&gt;二进制文件路径指向虚拟环境中二进制文件的实际位置&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;--bind&lt;/code&gt;指令指定创建文件的目录Gunicorn可以访问&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;myproject.wsgi:application&lt;/code&gt;确实指向WSGI可调用文件。这意味着当你在&lt;code&gt;WorkingDirectory&lt;/code&gt;目录下，通过查找&lt;code&gt;myproject.wsgi&lt;/code&gt;模块（就是&lt;code&gt;./myproject/wsgi.py&lt;/code&gt;文件），你应该能找到名为&lt;code&gt;application&lt;/code&gt;的可调用文件。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你修改了&lt;code&gt;/etc/systemd/system/gunicorn.service&lt;/code&gt;文件，再次读取服务说明以重新载入守护程序并重启Gunicorn进程：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请务必解决了所有问题后再进入下一步。&lt;/p&gt;

&lt;h2 id=&quot;配置nginx为gunicorn提供代理&quot;&gt;配置Nginx为Gunicorn提供代理&lt;/h2&gt;

&lt;p&gt;完成Gunicorn配置之后，我们需要将让Nginx将流量导向该进程。&lt;/p&gt;

&lt;p&gt;首先我们要在Nginx的&lt;code&gt;sites-available&lt;/code&gt;目录下创建一个新的server块:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/nginx/sites-available/myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在打开的文件中我们添加新的server块。我首先指明该server块监听端口80，这个端口会被用于响应服务器的域名或IP地址：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/nginx/sites-available/myproject

server {
    listen 80;
    server_name server_domain_or_IP;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，我们让Nginx忽略寻找网站图标（favicon）带来的错误。我们还将告诉Nginx如何找到放置在&lt;code&gt;~/myproject/static&lt;/code&gt;目录下的静态文件。所有的这些文件都有一个标准的URI外加一个“/static”前缀，我们可以添加一个location块来响应其请求：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/nginx/sites-available/myproject

server {
    listen 80;
    server_name server_domain_or_IP;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/sammy/myproject;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后我们创建一个&lt;code&gt;location / {}&lt;/code&gt;块来匹配其他请求。在这个location中，我们导入标准的&lt;code&gt;proxy_params&lt;/code&gt;文件。然后我们将流量导入Gunicorn创建的的套接字：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/nginx/sites-available/myproject

server {
    listen 80;
    server_name server_domain_or_IP;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/sammy/myproject;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/sammy/myproject/myproject.sock;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存并关闭文件。现在我们将其连接至&lt;code&gt;sites-enabled&lt;/code&gt;目录使其起作用：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;检查Nginx配置文件的语法错误：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果没有找到错误就可以重启Nginx：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后我们需要让防火墙允许80端口的访问，并且我们也不在需要8000端口：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw delete allow 8000
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow &lt;span class=&quot;s1&quot;&gt;'Nginx Full'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在你可以通过域名和IP地址访问你的网站。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16:-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04&lt;/a&gt;&lt;/p&gt;</content><author><name>OSer Huang</name></author><summary type="html"></summary></entry></feed>